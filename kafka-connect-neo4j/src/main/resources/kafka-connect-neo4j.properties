##
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

## Common Properties
neo4j.database=Type: String;\nDescription: The neo4j database instance name (default neo4j)
neo4j.server.uri=Type: String;\nDescription: The Bolt URI (default bolt://localhost:7687)
neo4j.authentication.type=Type: enum[NONE, BASIC, KERBEROS];\nDescription: The authentication type (default BASIC)
neo4j.batch.size=Type: Int;\nDescription: The max number of events processed by the Cypher query for the Sink. \
  The max number of messages pushed for each poll cycle in case of the Source. (default 1000)
neo4j.batch.timeout.msecs=Type: Long;\nDescription: The execution timeout for the cypher query (default: 0, that is without timeout)
neo4j.authentication.basic.username=Type: String;\nDescription: The authentication username
neo4j.authentication.basic.password=Type: String;\nDescription: The authentication password
neo4j.authentication.basic.realm=Type: String;\nDescription: The authentication realm
neo4j.authentication.kerberos.ticket=Type: String;\nDescription: The Kerberos ticket
neo4j.encryption.enabled=Type: Boolean;\nDescription: If the encryption is enabled (default false)
neo4j.encryption.trust.strategy=Type: enum[TRUST_ALL_CERTIFICATES, TRUST_CUSTOM_CA_SIGNED_CERTIFICATES, TRUST_SYSTEM_CA_SIGNED_CERTIFICATES];\n\
  Description: The Neo4j trust strategy (default TRUST_ALL_CERTIFICATES)
neo4j.encryption.ca.certificate.path=Type: String;\nDescription: The path of the certificate
neo4j.connection.max.lifetime.msecs=Type: Long;\nDescription: The max Neo4j connection lifetime (default 1 hour)
neo4j.connection.acquisition.timeout.msecs=Type: Long;\nDescription: The max Neo4j acquisition timeout (default 1 hour)
neo4j.connection.liveness.check.timeout.msecs=Type: Long;\nDescription: The max Neo4j liveness check timeout (default 1 hour)
neo4j.connection.max.pool.size=Type: Int;\nDescription: The max pool size (default 100)
neo4j.retry.backoff.msecs=Type: Long;\nDescription: The time in milliseconds to wait following a transient error \
  before a retry attempt is made (default 30000).
neo4j.retry.max.attemps=Type: Int;\nDescription: The maximum number of times to retry on transient errors \
  (except for TimeoutException) before failing the task (default 5).

## Sink Properties
neo4j.topic.cdc.sourceId=Type: String;\nDescription: The topic list (separated by semicolon) that manages CDC events with the `SourceId` strategy
neo4j.topic.cdc.sourceId.labelName=Type: String;\nDescription: The label name attached to the events with the `SourceId` strategy (default SourceEvent)
neo4j.topic.cdc.sourceId.idName=Type: String;\nDescription: The id property name attached to the events with the `SourceId` strategy (default sourceId)
neo4j.topic.cdc.schema=Type: String;\nDescription: The topic list (separated by semicolon) that manages CDC events with the `Schema` strategy
neo4j.batch.parallelize=Type: Boolean;\nDescription: If enabled messages are processed concurrently in the sink. \
  Non concurrent execution supports in-order processing, e.g. for CDC (default true)
neo4j.topic.cud=Type: String;\nDescription: The topic list (separated by semicolon) that manages CUD events
neo4j.topic.pattern.merge.node.properties.enabled=Type: Boolean;\nDescription: If enabled nodes properties will be merged when \
  using Sink `Node pattern` strategy (default false). In case of using Sink `Relationship pattern` strategy edge nodes properties will be merged when \
  creating relationships (default false)
neo4j.topic.pattern.merge.relationship.properties.enabled=Type: Boolean;\nDescription: If enabled relationships properties will be merged when creating relationships \
  using Sink `Relationship pattern` strategy (default false)

## Source Properties
topic=Type: String;\nDescription: The topic where the Source will publish the data
partitions=Type: Int;\nDescription: The number of partition for the Source (default 1)
neo4j.streaming.from=Type: enum[ALL, NOW, LAST_COMMITTED];\nDescription: When start the Source. ALL means from the beginning. \
  LAST_COMMITTED will try to retrieve already committed offset, \
  in case it will not find one LAST_COMMITTED use NOW as fallback (default NOW)
neo4j.source.type=Type: enum[QUERY];\nDescription: The type of the Source strategy, with UERY you must set `neo4j.source.query`
neo4j.source.query=Type: String\nDescription: The Cypher query in order to extract the data from Neo4j you need to \
  define it if you use `neo4j.source.type=QUERY`
neo4j.streaming.property=Type: String;\nDescription: The name of the property that we need to consider in order to determinate \
  the last queried record. If not defined we use an internal value given from the last performed check
neo4j.streaming.poll.interval.msecs=Type Int;\nDescription: The polling interval in ms (Default: 10000)
neo4j.enforce.schema=Type: Boolean;\nApply a schema to each record (Default: false)

